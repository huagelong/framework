#!/usr/bin/env php
<?php

/**
 * This example shows how to suspend and then resume a strand.
 *
 * This pattern is useful when a strand must wait on some operation that is not
 * coroutine based.
 */

declare(strict_types = 1);

require __DIR__ . '/../vendor/autoload.php';

use Recoil\Kernel\Strand;
use Recoil\React\ReactKernel;
use Recoil\Recoil;

$kernel = new ReactKernel();
$kernel->execute(function () {
    yield 1;
    echo '-- (5) delayed strand' . PHP_EOL;
});

$kernel->execute(function () use ($kernel) {
    echo '-- (2) entry-point called' . PHP_EOL;
    $strand = yield Recoil::execute(function () use ($kernel) {
        echo '-- (3) first waitable strand start' . PHP_EOL;
        $strand = yield Recoil::execute(function () {
            echo '-- (4) second waitable strand start' . PHP_EOL;
            yield 2;
            echo '-- (6) second waitable strand done' . PHP_EOL;
        });

        $kernel->waitForStrand($strand);
        echo '-- (7) first waitable strand done' . PHP_EOL;
    });

    $kernel->waitForStrand($strand);
    echo '-- (8) entry-point return' . PHP_EOL;

    $kernel->stop();
});

echo '-- (1) before main wait' . PHP_EOL;
$kernel->wait();
echo '-- (9) after main wait' . PHP_EOL;
